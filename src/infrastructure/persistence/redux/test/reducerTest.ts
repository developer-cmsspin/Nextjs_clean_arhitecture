'use client';
import ResponseExchange from '@/domain/test/entities/responseExchange';
import TestState from '@/domain/test/states/testState';
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

/**
 * The initial state for the 'test' slice.
 */
const initialState = {
  loading: false,
  client: new ResponseExchange()
} as TestState;

/**
 * The 'test' slice.
 *
 * @remarks
 * This slice defines the state and reducers related to the 'test' feature.
 * It provides actions to reset the state, load information, handle completion, and handle errors.
 */
export const test = createSlice({
  name: 'test',
  initialState,
  reducers: {
    /**
     * Resets the 'test' state to its initial values.
     */
    reset: () => initialState,

    /**
     * Sets the 'loading' state to true to indicate that information is being loaded.
     *
     * @param state - The current 'test' state.
     */
    loadInformation: (state) => {
      state.loading = true;
    },

    /**
     * Handles the completion of information loading by updating the state with the provided `ResponseExchange` payload.
     *
     * @param state - The current 'test' state.
     * @param action - The payload containing the completed response exchange data.
     */
    complete: (state, action: PayloadAction<ResponseExchange>) => {
      state.loading = false;
      state.client = action.payload;
    },

    /**
     * Handles an error by setting the 'loading' state to false and storing the error details in the state.
     *
     * @param state - The current 'test' state.
     * @param action - The payload containing the error details.
     */
    error: (state, action: PayloadAction<any>) => {
      state.loading = false;
      state.error = action.payload;
    }
  }
});

// Exporting the actions generated by the 'test' slice
export const { loadInformation, complete, error, reset } = test.actions;

// Exporting the reducer function generated by the 'test' slice
export default test.reducer;
